enum SemanticGroupDimension {
  group_id
}

input SemanticGroupFilterInput {
  projectIds: [UUID!]

  groupKeys: [String!]

  generationTags: [KeyValuePairInput!]

  relativeTimeDelta: String
}

"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""
scalar String

input GenerationFeatureFilterInput {
  projectIds: [UUID!]

  semanticGroupIds: [UUID!]

  name: String

  values: [StringOrNumber!]

  query: String

  tags: [KeyValuePairInput!]

  hasTagKeys: [String!]

  relativeTimeDelta: String
}

type GenerationFeatureResultPage {
  items: [GenerationFeature!]!

  pageInfo: PageInfo
}

type SemanticGroupResultPage {
  items: [SemanticGroup!]!

  pageInfo: PageInfo
}

type GenerationFeatureSpecResultPage {
  items: [GenerationFeatureSpec!]!

  pageInfo: PageInfo
}

type GenerationFeatureSpec {
  name: String!

  type: String!

  detectors: [Detector!]

  project: Project!

  stats(granularity: DateTimeGranularity = day, relativeTimeDelta: String = "3d"): [StatsMetric!]!
}

type SemanticGroup {
  id: UUID!

  name: String!

  label: String!

  project: Project!

  stats(granularity: DateTimeGranularity = day, relativeTimeDelta: String = "3d"): [StatsMetric!]!
}

type SemanticGroupMutationResult {
  success: Boolean!

  error: MutationError

  data: [SemanticGroup!]
}

"""
The `Boolean` scalar type represents `true` or `false`.
"""
scalar Boolean

type Query {
  apiKey: ApiKey

  whoami: User!

  authForEmail(email: String!, redirectUrl: String): AuthConfig

  authProviders(redirectUrl: String): [AuthConfig!]

  generationFeatureSpecs(filterBy: GenerationFeatureFilterInput, page: PageInput): GenerationFeatureSpecResultPage!

  generationFeatures(filterBy: GenerationFeatureFilterInput, page: PageInput): GenerationFeatureResultPage

  generationFeaturesStats(filterBy: GenerationFeatureFilterInput): [StatsMetric!]

  semanticGroup(groupId: UUID!): SemanticGroup

  semanticGroups(filterBy: SemanticGroupFilterInput, page: PageInput): SemanticGroupResultPage!

  semanticGroupStats(groupBy: [SemanticGroupDimension!], filterBy: SemanticGroupFilterInput, granularity: DateTimeGranularity = day, maxMetricsPerPeriod: Int = 5): [StatsMetric!]

  detector(detectorId: UUID!): Detector!

  detectors(filterBy: DetectorFilterInput, page: PageInput): DetectorResultPage!

  detectorUsageStats(dimensions: [DetectorUsageStatsDimension!]!, filterBy: DetectorUsageFilterInput, granularity: DateTimeGranularity = day, maxMetricsPerPeriod: Int = 5): [StatsMetric!]

  suggestDetectorSpec(description: String!): DetectorSuggestion

  generation(generationId: UUID!): Generation

  generations(filterBy: GenerationFilterInput, page: PageInput): GenerationResultPage!

  generationTags(filterBy: GenerationTagFilterInput, page: PageInput): GenerationTagResultPage!

  generationModels(filterBy: GenerationModelFilterInput, page: PageInput): GenerationModelResultPage!

  generationStats(dimensions: [GenerationGroupDimension!]!, filterBy: GenerationFilterInput, granularity: DateTimeGranularity! = day, maxMetricsPerPeriod: Int! = 5): [StatsMetric!]

  issue(issueId: UUID!): Issue

  issues(filterBy: IssueFilterInput, page: PageInput): IssueResultPage!

  issueCategories(filterBy: IssueFilterInput, page: PageInput): IssueCategoryResultPage!

  issuesStats(dimensions: [IssueGroupDimension!]!, filterBy: IssueFilterInput, granularity: DateTimeGranularity = day, maxMetricsPerPeriod: Int = 5): [StatsMetric!]

  policy(policyId: UUID!): Policy

  policies(filterBy: PolicyFilterInput, page: PageInput): PolicyResultPage

  suggestPolicyEvaluationRecords(policyId: UUID!): Data!

  project(projectId: UUID!): Project!

  projects(page: PageInput): ProjectResultPage!

  user(userId: UUID!, page: PageInput): User

  users(filter_by: UserFilterInput!): UserResultPage!
}

"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""
scalar Int

type Mutation {
  selectTenant(tenantId: UUID): MutationResult

  createApiKey(name: String!): ApiKeyMutationResult!

  logout: MutationResult

  calculateSemanticGroups(projectId: UUID!, key: String!, maxSamples: Int, relativeTimeDelta: String): SemanticGroupMutationResult!

  createDetector(detector: DetectorInput!, projectId: UUID): DetectorMutationResult!

  updateDetector(detectorId: UUID!, detector: DetectorInput!): DetectorMutationResult!

  deleteDetector(detectorId: UUID!): MutationResult!

  addDetectorEvaluationRecord(detectorId: UUID!, evaluationRecord: DetectorEvaluationRecordInput!): DetectorMutationResult!

  removeDetectorEvaluationRecord(detectorId: UUID!, evaluationRecordId: UUID!): DetectorMutationResult!

  evaluateDetectorRecords(detectorId: UUID, detector: DetectorInput, records: [DetectorEvaluationRecordInput!]): DetectorEvaluationResult!

  assignDetectorToProject(detectorId: UUID!, projectId: UUID!): MutationResult!

  removeDetectorFromProject(detectorId: UUID!, projectId: UUID!): MutationResult!

  createPolicy(policy: PolicyInput!, projectId: UUID): PolicyMutationResult

  updatePolicy(policyId: UUID!, policy: PolicyInput!): PolicyMutationResult

  deletePolicy(policyId: UUID!): MutationResult

  addPolicyRule(policyId: UUID!, rule: PolicyRuleInput!): PolicyRuleMutationResult

  updatePolicyRule(policyId: UUID!, ruleId: UUID!, rule: PolicyRuleInput!): PolicyRuleMutationResult

  deletePolicyRule(policyId: UUID!, ruleId: UUID!): MutationResult

  addPolicyEvaluationRecord(policyId: UUID!, evaluationRecord: PolicyEvaluationRecordInput!): PolicyMutationResult!

  removePolicyEvaluationRecord(policyId: UUID!, evaluationRecordId: UUID!): PolicyMutationResult!

  evaluatePolicyRecords(policyId: UUID!, records: [PolicyEvaluationRecordInput!]): PolicyEvaluationResult!

  assignPolicyToProject(policyId: UUID!, projectId: UUID!): MutationResult

  removePolicyFromProject(policyId: UUID!, projectId: UUID!): MutationResult

  collect(generations: [GenerationInput!]!, projectId: UUID): MutationResult!

  analyzeGeneration(generation: GenerationInput!, projectId: UUID, categories: [String!], severities: [Severity!], timeout: Float): GenerationInsights!

  createProject(project: ProjectInput!): ProjectMutationResult!

  updateProject(projectId: UUID!, project: ProjectInput!): ProjectMutationResult!

  deleteProject(projectId: UUID!): MutationResult!

  createProjectApiKey(name: String!, projectId: UUID!): ApiKeyMutationResult!

  deleteProjectApiKey(keyId: UUID!): MutationResult!

  setProjectMembership(projectId: UUID!, userId: UUID!, level: MembershipLevel): MutationResult!

  setTenantMembership(userId: UUID!, level: MembershipLevel): MutationResult!
}

"""
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
"""
scalar Float

type ApiKeyInfo {
  owner: String
}

enum MembershipLevel {
  owner

  member

  reader
}

type ApiKeyMutationResult {
  success: Boolean!

  error: MutationError

  data: ApiKey
}

type Action {
  name: String!

  resourceType: String!

  requiredMembershipType: Membership
}

type AuthConfig {
  slug: String!

  name: String!

  iconUrl: String

  redirectUrl: String
}

type ApiKey {
  id: UUID!

  name: String!

  value: String!

  scope: String!

  createdTs: DateTime!

  enabled: Boolean!

  usage: ApiKeyUsage
}

type ApiKeyUsage {
  processedGenerationsCount: Int

  lastUsedTs: DateTime
}

type User {
  id: UUID!

  name: String!

  email: String!

  avatarUrl: String

  apiKeys: [ApiKey!]

  createdTs: DateTime

  projects: [Project!]

  tenants: [Tenant!]

  authenticatedTenant: Tenant
}

type Membership {
  level: MembershipLevel!

  createdTs: DateTime
}

type UserMembership {
  user: User!

  level: MembershipLevel!

  createdTs: DateTime
}

union DetectorOwner = User|Tenant|Project

type DetectorEvaluationRecordResult {
  record: DetectorEvaluationRecord!

  features: [GenerationFeature!]

  expectedFeatureExtracted: Boolean!
}

type DetectorEvaluationResult {
  success: Boolean!

  error: MutationError

  data: [DetectorEvaluationRecordResult!]
}

enum DetectorUsageStatsDimension {
  invocation

  extraction

  extracted_name
}

input DetectorUsageFilterInput {
  projectIds: [UUID!]

  relativeTimeDelta: String
}

input DetectorFilterInput {
  projectIds: [UUID!]

  includeGlobal: Boolean
}

enum DetectorModelProvider {
  openai
}

input DetectorPromptSpecInput {
  template: String!

  conversationTemplate: String

  implementationClass: String
}

input DetectorOutputInput {
  name: String!

  description: String

  values: [String!]

  index: Boolean
}

input DetectorOutputSpecInput {
  type: String!

  outputs: [DetectorOutputInput!]

  multipleOutputsAllowed: Boolean

  additionalOutputsAllowed: Boolean
}

input DetectorEvaluationRecordInput {
  description: String

  messages: [GenerationMessageInput!]

  outputName: String!

  expectedOutput: StringOrNumber
}

input DetectorInput {
  name: String!

  description: String

  categories: [String!]

  promptSpec: DetectorPromptSpecInput

  outputSpec: DetectorOutputSpecInput

  testRecord: DetectorEvaluationRecordInput
}

type DetectorResultPage {
  items: [Detector!]

  pageInfo: PageInfo!
}

type DetectorMutationResult {
  success: Boolean!

  error: MutationError

  data: Detector
}

type DetectorPromptSpec {
  template: String!

  conversationTemplate: String

  implementationClass: String
}

type DetectorOutput {
  name: String!

  description: String

  values: [String!]

  index: Boolean
}

enum DetectorOutputType {
  text

  number

  entity
}

type DetectorOutputSpec {
  type: DetectorOutputType!

  outputs: [DetectorOutput!]

  multipleOutputsAllowed: Boolean

  additionalOutputsAllowed: Boolean
}

type DetectorSuggestion {
  name: String!

  description: String

  categories: [String!]

  promptSpec: DetectorPromptSpec

  outputSpec: DetectorOutputSpec

  evaluationRecords: [DetectorEvaluationRecord!]
}

type Detector {
  id: UUID!

  name: String!

  description: String

  categories: [String!]

  promptSpec: DetectorPromptSpec

  outputSpec: DetectorOutputSpec

  evaluationRecords: [DetectorEvaluationRecord!]

  testRecord: DetectorEvaluationRecord

  createdTs: DateTime

  updatedTs: DateTime

  isGlobal: Boolean!

  owner: DetectorOwner

  projects: [Project!]

  policies: [Policy!]
}

type DetectorEvaluationMessage {
  role: String!

  content: String!
}

type DetectorEvaluationRecord {
  id: UUID!

  description: String

  outputName: String!

  expectedOutput: StringOrNumber

  messages: [DetectorEvaluationMessage!]!

  previewMessage: String
}

enum GenerationTagGroupDimension {
  key

  value
}

enum GenerationGroupDimension {
  model

  project
}

input GenerationTagFilterInput {
  projectIds: [UUID!]

  key: String

  relativeTimeDelta: String!
}

input GenerationModelFilterInput {
  projectIds: [UUID!]

  relativeTimeDelta: String!
}

input GenerationFilterInput {
  projectIds: [UUID!]

  models: [String!]

  tags: [KeyValuePairInput!]

  hasTagKeys: [String!]

  relativeTimeDelta: String!

  query: String
}

type GenerationModelResultPage {
  items: [String!]!

  pageInfo: PageInfo
}

type GenerationTagResultPage {
  items: [KeyValuePair!]!

  pageInfo: PageInfo
}

type MetricResultPage {
  items: [StatsMetric!]!

  pageInfo: PageInfo
}

type GenerationResultPage {
  items: [Generation!]!

  pageInfo: PageInfo
}

type Generation {
  session_id: String

  id: String!

  external_id: String

  model: String!

  createdTs: DateTime

  duration: Float

  timeToFirstToken: Float

  usage: GenerationUsage!

  messages: [GenerationMessage!]

  previewMessage: String

  turns: Int

  project: Project!

  tags: [KeyValuePair!]

  issues: [Issue!]

  features(names: [String!]): [GenerationFeature!]
}

type GenerationMessage {
  role: String!

  content: String!

  tags: [KeyValuePair!]
}

type GenerationUsage {
  promptTokens: Int

  completionTokens: Int

  totalTokens: Int
}

enum IssueGroupDimension {
  severity

  category

  project

  model

  policy

  rule
}

input IssueFilterInput {
  projectIds: [UUID!]

  models: [String!]

  categories: [String!]

  severities: [Severity!]

  policyIds: [UUID!]

  tags: [KeyValuePairInput!]

  hasTagKeys: [String!]

  policyRuleIds: [UUID!]

  relativeTimeDelta: String
}

type IssueCategoryResultPage {
  items: [String!]!

  pageInfo: PageInfo
}

type IssueResultPage {
  items: [Issue!]!

  pageInfo: PageInfo
}

type IssueGroupResultPage {
  items: [IssueGroup!]

  pageInfo: PageInfo
}

type IssueGroup {
  dimensions: [StatsMetricDimension!]!

  items: [Issue!]
}

type Issue {
  id: UUID

  category: String!

  severity: Severity!

  message: String!

  processingTs: DateTime!

  generation: Generation

  tags: [KeyValuePair!]
}

scalar DateTime

scalar Data

scalar UUID

scalar StringOrNumber

enum MutationErrorType {
  evaluation

  permission
}

type MutationResult {
  success: Boolean!

  error: MutationError

  data: Data
}

type MutationError {
  type: MutationErrorType

  message: String!
}

input KeyValuePairInput {
  key: String!

  value: String!
}

type KeyValuePair {
  key: String!

  value: String!
}

type PageInfo {
  index: Int!

  hasNext: Boolean!
}

input PageInput {
  index: Int = 0

  size: Int = 20
}

enum Severity {
  critical

  high

  medium

  low

  info
}

enum DateTimeGranularity {
  hour

  day

  week

  month
}

type StatsMetric {
  dimensions: [StatsMetricDimension!]

  value: Float!

  change: Float

  unit: String

  timestamp: DateTime!
}

type StatsMetricDimension {
  dimension: String! @deprecated(reason: "No longer supported")

  name: String!

  value: String!
}

type PolicyEvaluationResult {
  success: Boolean!

  error: MutationError

  data: [PolicyEvaluationRecordResult!]
}

type PolicyEvaluationRecordResult {
  record: PolicyEvaluationRecord!

  issues: [Issue!]

  features: [GenerationFeature!]

  expectedIssueCreated: Boolean!
}

input PolicyFilterInput {
  query: String

  includeGlobal: Boolean = true
}

input PolicyInput {
  name: String!

  description: String

  categories: [String!]
}

input PolicyRuleInput {
  detector_id: UUID!

  description: String!

  outputName: String!

  matchValues: [String!]

  severity: Severity!

  category: String!

  message: String!
}

type PolicyRuleMutationResult {
  success: Boolean!

  error: MutationError

  data: PolicyRule
}

type PolicyResultPage {
  items: [Policy!]

  pageInfo: PageInfo!
}

type PolicyMutationResult {
  success: Boolean!

  error: MutationError

  data: Policy
}

type Policy {
  id: UUID!

  name: String!

  description: String

  categories: [String!]

  evaluationRecords: [PolicyEvaluationRecord!]

  owner: DetectorOwner

  rules: [PolicyRule!]

  projects: [Project!]
}

type PolicyRule {
  id: UUID!

  description: String

  outputName: String!

  matchValues: [String!]

  severity: Severity!

  category: String!

  message: String!

  detector: Detector!
}

type EvaluationResult {
  success: Boolean!

  error: MutationError

  data: [GenerationInsights!]
}

input PolicyEvaluationRecordInput {
  description: String

  messages: [GenerationMessageInput!]

  expectedCategory: String!

  expectedSeverity: Severity!
}

type PolicyEvaluationRecord {
  id: UUID!

  description: String

  expectedCategory: String!

  expectedSeverity: Severity!

  messages: [DetectorEvaluationMessage!]!

  previewMessage: String
}

input GenerationInput {
  sessionId: String

  id: String

  model: String!

  messages: [GenerationMessageInput!]!

  usage: UsageInput

  tags: [KeyValuePairInput!]

  created: DateTime

  duration: Float

  timeToFirstToken: Float
}

input PromptTokensDetailsInput {
  cachedTokens: Int

  audioTokens: Int
}

input CompletionTokensDetailsInput {
  reasoningTokens: Int

  audioTokens: Int
}

input UsageInput {
  promptTokens: Int

  completionTokens: Int

  totalTokens: Int

  promptTokensDetails: PromptTokensDetailsInput

  completionTokensDetails: CompletionTokensDetailsInput
}

input GenerationMessageInput {
  content: String!

  role: String!

  tags: [KeyValuePairInput!]
}

type GenerationInsights {
  issues: [Issue!]

  features: [GenerationFeature!]

  errors: [ExtractionError!]

  evaluationErrors: [EvaluationError!]

  timeouts: [ExtractionTimeout!]

  reason: String
}

type ExtractionError {
  message: String!

  detector: Detector
}

type EvaluationError {
  message: String!

  detector: Detector
}

type ExtractionTimeout {
  timeout: Float!

  detector: Detector
}

type EntityLocation {
  messageIndex: Int!

  start: Int!

  end: Int!
}

type GenerationFeature {
  name: String!

  type: String!

  value: StringOrNumber!

  explanation: String

  locations: [EntityLocation!]

  processingTs: DateTime

  processingDurationSeconds: Float

  detector: Detector

  generation: Generation!
}

union ProjectOwner = User|Tenant

input ProjectInput {
  name: String!

  description: String
}

type ProjectResultPage {
  items: [Project!]

  pageInfo: PageInfo!
}

type ProjectMutationResult {
  success: Boolean!

  error: MutationError

  data: Project
}

type Project {
  id: UUID!

  name: String!

  description: String

  apiKeys: [ApiKey!]

  createdTs: DateTime

  currentUserMembership: Membership

  members: [UserMembership!]!

  detectors: [Detector!]!

  policies: [Policy!]!

  owner: ProjectOwner
}

input UserFilterInput {
  query: String

  user_ids: [UUID!]
}

type Tenant {
  id: UUID!

  slug: String!

  name: String!

  emailDomains: [String!]

  createdTs: DateTime

  projects: [Project!]

  currentUserMembership: Membership
}

type UserResultPage {
  items: [User!]!

  pageInfo: PageInfo
}

"""
A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.
"""
type __Schema {
  description: String

  """
  A list of all types supported by this server.
  """
  types: [__Type!]!

  """
  The type that query operations will be rooted at.
  """
  queryType: __Type!

  """
  If this server supports mutation, the type that mutation operations will be rooted at.
  """
  mutationType: __Type

  """
  If this server support subscription, the type that subscription operations will be rooted at.
  """
  subscriptionType: __Type

  """
  A list of all directives supported by this server.
  """
  directives: [__Directive!]!
}

"""
The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.

Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.
"""
type __Type {
  kind: __TypeKind!

  name: String

  description: String

  specifiedByURL: String

  fields(includeDeprecated: Boolean = false): [__Field!]

  interfaces: [__Type!]

  possibleTypes: [__Type!]

  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]

  inputFields(includeDeprecated: Boolean = false): [__InputValue!]

  ofType: __Type
}

"""
An enum describing what kind of type a given `__Type` is.
"""
enum __TypeKind {
  """
  Indicates this type is a scalar.
  """
  SCALAR

  """
  Indicates this type is an object. `fields` and `interfaces` are valid fields.
  """
  OBJECT

  """
  Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.
  """
  INTERFACE

  """
  Indicates this type is a union. `possibleTypes` is a valid field.
  """
  UNION

  """
  Indicates this type is an enum. `enumValues` is a valid field.
  """
  ENUM

  """
  Indicates this type is an input object. `inputFields` is a valid field.
  """
  INPUT_OBJECT

  """
  Indicates this type is a list. `ofType` is a valid field.
  """
  LIST

  """
  Indicates this type is a non-null. `ofType` is a valid field.
  """
  NON_NULL
}

"""
Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.
"""
type __Field {
  name: String!

  description: String

  args(includeDeprecated: Boolean = false): [__InputValue!]!

  type: __Type!

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.
"""
type __InputValue {
  name: String!

  description: String

  type: __Type!

  """
  A GraphQL-formatted string representing the default value for this input value.
  """
  defaultValue: String

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.
"""
type __EnumValue {
  name: String!

  description: String

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.

In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.
"""
type __Directive {
  name: String!

  description: String

  isRepeatable: Boolean!

  locations: [__DirectiveLocation!]!

  args(includeDeprecated: Boolean = false): [__InputValue!]!
}

"""
A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.
"""
enum __DirectiveLocation {
  """
  Location adjacent to a query operation.
  """
  QUERY

  """
  Location adjacent to a mutation operation.
  """
  MUTATION

  """
  Location adjacent to a subscription operation.
  """
  SUBSCRIPTION

  """
  Location adjacent to a field.
  """
  FIELD

  """
  Location adjacent to a fragment definition.
  """
  FRAGMENT_DEFINITION

  """
  Location adjacent to a fragment spread.
  """
  FRAGMENT_SPREAD

  """
  Location adjacent to an inline fragment.
  """
  INLINE_FRAGMENT

  """
  Location adjacent to a variable definition.
  """
  VARIABLE_DEFINITION

  """
  Location adjacent to a schema definition.
  """
  SCHEMA

  """
  Location adjacent to a scalar definition.
  """
  SCALAR

  """
  Location adjacent to an object type definition.
  """
  OBJECT

  """
  Location adjacent to a field definition.
  """
  FIELD_DEFINITION

  """
  Location adjacent to an argument definition.
  """
  ARGUMENT_DEFINITION

  """
  Location adjacent to an interface definition.
  """
  INTERFACE

  """
  Location adjacent to a union definition.
  """
  UNION

  """
  Location adjacent to an enum definition.
  """
  ENUM

  """
  Location adjacent to an enum value definition.
  """
  ENUM_VALUE

  """
  Location adjacent to an input object type definition.
  """
  INPUT_OBJECT

  """
  Location adjacent to an input object field definition.
  """
  INPUT_FIELD_DEFINITION
}

directive @auth (requires: MembershipLevel) on FIELD_DEFINITION

directive @cost (complexity: Int, multipliers: [String!], useMultipliers: Boolean) on FIELD|FIELD_DEFINITION

"""
Directs the executor to include this field or fragment only when the `if` argument is true.
"""
directive @include ("Included when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Directs the executor to skip this field or fragment when the `if` argument is true.
"""
directive @skip ("Skipped when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Marks an element of a GraphQL schema as no longer supported.
"""
directive @deprecated ("Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https:\/\/commonmark.org\/)." reason: String = "No longer supported") on FIELD_DEFINITION|ARGUMENT_DEFINITION|INPUT_FIELD_DEFINITION|ENUM_VALUE

"""
Exposes a URL that specifies the behavior of this scalar.
"""
directive @specifiedBy ("The URL that specifies the behavior of this scalar." url: String!) on SCALAR

schema {
  query: Query
  mutation: Mutation
}
